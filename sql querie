import configparser


# CONFIG
config = configparser.ConfigParser()
config.read('dwh.cfg')

# DROP TABLES

staging_events_table_drop = "DROP TABLE IF EXISTS staging_events_table_create"
staging_songs_table_drop = "DROP TABLE IF EXISTS staging_songs_table_create"
songplay_table_drop = "DROP TABLE IF EXISTS songplay_table_create"
user_table_drop = "DROP TABLE IF EXISTS user_table_create"
song_table_drop = "DROP TABLE IF EXISTS song_table_create"
artist_table_drop = "DROP TABLE IF EXISTS artist_table_create"
time_table_drop = "DROP TABLE IF EXISTS time_table_create"

# CREATE TABLES

staging_events_table_create= ("""
CREATE TABLE IF NOT EXISTS staging_events_table_create
(
    artist VARCHAR,
    auth VARCHAR,
    first_name VARCHAR,
    gender VARCHAR,
    item_in_session INTEGER,
    last_name VARCHAR,
    lenght FLOAT,
    level VARCHAR,
    location VARCHAR,
    method VARCHAR,
    page VARCHAR,
    registration FLOAT,
    session_Id INTEGER,
    song VARCHAR,
    status INTEGER,
    ts DECIMAL,
    user_agent VARCHAR,
    user_id INTEGER,
);
""")

staging_songs_table_create = ("""
CREATE TABLE IF NOT EXISTS staging_songs_table_create
( 
    num_songs INT,
    artist_id VARCHAR,
    artist_latitude FLOAT,
    artist_longitude FLOAT,
    artist_location VARCHAR,
    artist_name VARCHAR,
    song_id INTEGER,
    title VARCHAR,
    artist_id VARCHAR,
    duration INTEGER,
    year INTEGER,
);
""")

songplay_table_create = ("""
CREATE TABLE IF NOT EXISTS songplay_table_create
    songplay_id INTEGER identity(0,1) NOT NULL PRIMARY KEY,
    start_time INTEGER,
    user_id VARCHAR NOT NULL,
    level VARCHAR,
    song_id VARCHAR NOT NULL,
    artist_id VARCHAR NOT NULL,
    session_id INTEGER,
    location VARCHAR ,
    user_agent VARCHAR
)
DISTSTYLE KEY
DISTKEY (song_id)
SORTEY (start_time);
""")

user_table_create = ("""
CREATE TABLE IF NOT EXISTS user_table_create
(
    user_id INTEGER PRIMARY KEY NOT NULL,
    first_name VARCHAR,
    last_name VARCHAR,
    gender VARCHAR,
    level VARCHAR
)
SORTKEY (user_id);
""")

song_table_create = ("""
CREATE TABLE IF NOT EXISTS song_table_create
(
    song_id VARCHAR NOT NULL PRIMARY KEY,
    title VARCHAR ,
    artist_id VARCHAR NOT NULL,
    year INTEGER NOT NULL,
    duration INTEGER
)
SORTKEY (song_id);
""")

artist_table_create = ("""
CREATE TABLE IF NOT EXISTS artist_table_create
(
    artist_id VARCHAR PRIMARY KEY NOT NULL,
    name VARCHAR,
    location VARCHAR,
    latitude FLOAT,
    longitude FLOAT
)
SORTKEY (artist_id);
""")

time_table_create = ("""
CREATE TABLE IF NOT EXISTS time_table_create
(
    start_time NOT NULL PRIMARY KEY DISTKEY SORTKEY,
    hour INTEGER,
    day INTEGER,
    week INTEGER,
    month INTEGER,
    year INTEGER,
    weekday VARCHAR
)

# STAGING TABLES

staging_events_copy = ("""
COPY staging_events_table_create FROM {}
IAM_role{}
json{};
""").format(config['S3']['LOG_DATA'], config['IAM_role']['arn'], config['S3']['LOG_JSONPATH'])

staging_songs_copy = ("""
COPY staging_songs_table_create FROM {}
IAM_role{}
json'auto';
""").format(config['S3']['SONG_DATA'], config['IAM_role']['arn'])


# FINAL TABLES

songplay_table_insert = ("""
INSERT INTO SONGPLAYS (start_time, user_id, level, song_id, artist_id, session_id, location, user_agent)
SELECT DISTINCT
        TIMESTAMP 'epoch' +e.ts / 1000 * INTERVAL '1 second' as start_time,
        e.user_id,
        e.level,
        s.song_id,
        s.artist_id,
        e.sessionid,
        e.location,
        e.useragent,
FROM staging_events_table_create e
JOIN staging_events_table_create s
on (s.title = e.song AND s.artist = e.artist_name)
WHERE e.page = 'nextsong';
""")

user_table_insert = ("""
INSERT INTO USERS
SELECT DISTINCT user_id, first_name, last_name, gender, level
FROM staging_events_table_create
WHERE user_id IS NOT NULL
AND page = 'nextsong';
""")

song_table_insert = ("""
INSERT INTO SONGS
SELECT DISTINCT song_id, title, artist_id, year, duration
FROM staging_songs_table_create
WHERE song_id IS NOT NULL;
""")

artist_table_insert = ("""
INSERT INTO ARTISTS
SELECT DISTINCT artist_id, artist_name, artist_location, artist_latitude, artist_longitude
FROM staging_songs_table_create
WHERE artist_id IS NOT NULL
""")

time_table_insert = ("""
insert into time
SELECT DISTINCT
    TIMESTAMP 'epoch' + (ts/1000) * INTERVAL '1 second' as start_time,
    EXTRACT(hour from start_time) as hour,
    EXTRACT(day from start_time) as day,
    EXTRACT(week from start_time) as week,
    EXTRACT(month from start_time) as month,
    EXTRACT(year from start_time) as year,
    EXTRACT(weekday from start_time) as weekday,
    
FROM staging_events;    
""")

# QUERY LISTS

create_table_queries = [staging_events_table_create, staging_songs_table_create, songplay_table_create, user_table_create, song_table_create, artist_table_create, time_table_create]
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]
copy_table_queries = [staging_events_copy, staging_songs_copy]
insert_table_queries = [songplay_table_insert, user_table_insert, song_table_insert, artist_table_insert, time_table_insert]
